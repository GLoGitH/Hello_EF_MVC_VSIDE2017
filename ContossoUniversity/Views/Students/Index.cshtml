@model ContosoUniversity.PaginatedList<ContosoUniversity.Models.Student>


@{
	ViewData["Title"] = "Index";
}

<h2>Index</h2>

<!--at_model --IEnumerable<ContosoUniversity.Models.Student> -->


<p>
	<a asp-action="Create">Create New</a>
</p>

<!-- By default, the <form> tag helper submits form data with a POST.
	 The W3C guidelines recommend that you should use GET when the action doesn't result in an update.
-->
<form asp-action="Index" method="get">
	<div class="form-actions no-color">
		<p>
			Find by name: <input type="text" name="SearchString" value="@ViewData["currentFilter"]" />
			<input type="submit" value="Search" class="btn btn-default" /> |
			<a asp-action="Index">Back to Full List</a>
		</p>
	</div>
</form>

<table class="table">
	<thead>
		<tr>
			<th>
				<!-- at_Html.DisplayNameFor(model => model.FirstMidName) -->
				First Name <!-- you're no longer directly linked to the model (as you wre with the IEnumerable - you're linked to the PaginatedList who is general (<T>) , so you cannot get the name for the field any more... so the at_Html will no longer work -->
			</th>
			<th>
				<a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Last Name</a>
			</th>
			<th>
				<a asp-action="Index" asp-route-sortOrder="@ViewData["DateSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Enrollment Date</a>
			</th>
			<th></th>
		</tr>
	</thead>
	<tbody>
		@foreach (var item in Model)
		{
			<tr>
				<td>
					@Html.DisplayFor(modelItem => item.FirstMidName)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.LastName)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.EnrollmentDate)
				</td>
				<td>
					<a asp-action="Edit" asp-route-id="@item.ID">Edit</a> |
					<a asp-action="Details" asp-route-id="@item.ID">Details</a> |
					<a asp-action="Delete" asp-route-id="@item.ID">Delete</a>
				</td>
			</tr>
		}
	</tbody>
</table>

@{
	var prevDisabled = (!(Model.HasPreviousPage)) ? "disabled" : String.Empty;
	var nextDisabled = (!(Model.HasNextPage)) ? "disabled" : String.Empty;
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
	Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
	Next
</a>

